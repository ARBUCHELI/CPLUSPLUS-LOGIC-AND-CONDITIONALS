# CONDITIONAL STATEMENTS
------------------------

* Introduction to Conditional Statements
----------------------------------------
We make decisions all the time in our life based on different conditions. Are you going to drink tea or coffee? Study history or biology? Buy a new shirt or save your money?

We can program computers to make decisions based on different conditions. We can specify to the computer the order in which it should execute certain instructions, or that it should only 
execute certain instructions in specific cases. That means that depending on the conditions, the instructions that our program executes can change.

The order that computer programs execute a set of instructions is known as control flow. We can use different control structures to alter the flow of our program. Control structures let 
us handle different situations that might arise and make our programs more flexible. In C#, these type of statements are known as conditional or selection statements.

Boolean logic and conditional statements go hand in hand. A computer will determine if a condition is true or false and execute a set of instructions accordingly. Make sure that you’re 
comfortable with Boolean values, comparison operators, and logical operators!

We’ll look at a couple of different structures that use Boolean logic to control the flow of our programs, including:

	. If statements

	. If…Else… statements

	. Else if statements

	. Switch statements

	. Ternary Operators

===================================================================================================================================================================

* If Statements
---------------
Conditional statements are the most commonly used control structures in programming. They rely on the computer being able to reason whether conditions are true or false.

The most basic conditional statement is an if statement. An if statement executes a block of code if specified condition is true.

In C#, we write an if statement using the following syntax:

string color = "blue";
 
if (color == "blue")
{
  // this code block will execute only if the value of color is 
  // equivalent to "blue"
  Console.WriteLine("color is blue");
}
 
In this example, our if conditional statement checks to see if the value of the variable color is equivalent to the string "blue". Since it is, it will execute the code in the code block 
and print the string "color is blue" to the console. If color equals another value or was null, the program skips over the block and moves on to the next instruction.

When writing an if statement, make sure to pay attention to:

	. Parentheses: we place the boolean expression that the if statement is evaluating in parentheses ().

	. Braces: after the boolean expression, we write a set of braces {}. Write the code that will execute if the boolean expression evaluates to true inside these braces.

	. Indentation: while whitespace won’t impact our program, it is convention to indent the code inside the braces by two spaces.

Program.cs
----------
using System;

namespace IfStatement
{
  class Program
  {
    static void Main(string[] args)
    {
      int socks = 6;
      if (socks <= 3)
      {
        Console.WriteLine("Time to do laundry!");
      }

    }
  }
}

==================================================================================================================================================================

















































