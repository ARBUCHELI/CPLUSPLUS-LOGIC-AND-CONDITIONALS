# CONDITIONAL STATEMENTS
------------------------

* Introduction to Conditional Statements
----------------------------------------
We make decisions all the time in our life based on different conditions. Are you going to drink tea or coffee? Study history or biology? Buy a new shirt or save your money?

We can program computers to make decisions based on different conditions. We can specify to the computer the order in which it should execute certain instructions, or that it should only 
execute certain instructions in specific cases. That means that depending on the conditions, the instructions that our program executes can change.

The order that computer programs execute a set of instructions is known as control flow. We can use different control structures to alter the flow of our program. Control structures let 
us handle different situations that might arise and make our programs more flexible. In C#, these type of statements are known as conditional or selection statements.

Boolean logic and conditional statements go hand in hand. A computer will determine if a condition is true or false and execute a set of instructions accordingly. Make sure that you’re 
comfortable with Boolean values, comparison operators, and logical operators!

We’ll look at a couple of different structures that use Boolean logic to control the flow of our programs, including:

	. If statements

	. If…Else… statements

	. Else if statements

	. Switch statements

	. Ternary Operators

===================================================================================================================================================================

* If Statements
---------------
Conditional statements are the most commonly used control structures in programming. They rely on the computer being able to reason whether conditions are true or false.

The most basic conditional statement is an if statement. An if statement executes a block of code if specified condition is true.

In C#, we write an if statement using the following syntax:

string color = "blue";
 
if (color == "blue")
{
  // this code block will execute only if the value of color is 
  // equivalent to "blue"
  Console.WriteLine("color is blue");
}
 
In this example, our if conditional statement checks to see if the value of the variable color is equivalent to the string "blue". Since it is, it will execute the code in the code block 
and print the string "color is blue" to the console. If color equals another value or was null, the program skips over the block and moves on to the next instruction.

When writing an if statement, make sure to pay attention to:

	. Parentheses: we place the boolean expression that the if statement is evaluating in parentheses ().

	. Braces: after the boolean expression, we write a set of braces {}. Write the code that will execute if the boolean expression evaluates to true inside these braces.

	. Indentation: while whitespace won’t impact our program, it is convention to indent the code inside the braces by two spaces.

Program.cs
----------
using System;

namespace IfStatement
{
  class Program
  {
    static void Main(string[] args)
    {
      int socks = 6;
      if (socks <= 3)
      {
        Console.WriteLine("Time to do laundry!");
      }

    }
  }
}

==================================================================================================================================================================

* If...Else... Statements
-------------------------
What if we want another set of instructions to execute if the condition is false? An else clause can be added to an if statement to provide code that will only be executed if the if 
condition is false.

In C#, we write an if..else… statement using the following syntax:

string color = "red";
 
if (color == "blue")
{
  // this code block will execute only if the value of color is 
  // equivalent to "blue"
  Console.WriteLine("color is blue");
} 
else 
{
  // this code block will execute if the value of color is 
  // NOT equivalent to "blue"
  Console.WriteLine("color is NOT blue");
}
 
In this example, we’re still checking to see if color equals "blue". However, this time we also added a second code block that will execute if the result of (color == "blue") is false. 
Since color equals "red" this time, it will skip the first code block and execute the second code block, before moving on with the rest of the program.

When writing an if…else… statement, make sure to pay attention to:

	. else follows if: In an if…else… statement, the else statement and its corresponding code block still need to follow the if statement and code block.

	. Number of code blocks: Make sure that if you include an else statement, that you include a code block with it.

Program.cs
----------
using System;

namespace IfElseStatement
{
  class Program
  {
    static void Main(string[] args)
    {
      int people = 11;
      string weather = "nice";
      if (people <= 10 && weather == "nice") 
      {
        Console.WriteLine("SaladMart");
      }
      else
      {
        Console.WriteLine("Soup N Sandwich");
      }
    }
  }
}

==================================================================================================================================================================

* Else If Statements
--------------------
What if we want to handle multiple conditions and have a different thing happen each time? Conditional statements can be chained by combining if and else statements into else if. After an 
initial if statement, one or more else if blocks can check additional conditions. An optional else block can be added at the end to catch cases that do not match any of the conditions.

In C#, we write an if..else if... statement using the following syntax:

string color = "red";
 
if (color == "blue")
{
  // this code block will execute only if the value of color is 
  // equivalent to "blue"
  Console.WriteLine("color is blue");
} 
else if (color == "red")
{
  // this code block will execute if the value of color is 
  // equivalent to "red"
  Console.WriteLine("color is NOT blue");
} 
else // this is optional
{
  // this code block will execute if the value of color is 
  // NOT equivalent to "blue" OR "red"
  Console.WriteLine("color is NOT blue OR red");
}
 
In this example, the program checks to see if color equals "blue" OR "red". Depending on what color is equivalent to, it will execute the corresponding code block. If it isn’t equal to 
either of those colors, it will execute the else block before moving on with the rest of the program.

When using else if statement, make sure to pay attention to:

	. Each else if statement gets its own condition: make sure to specify the condition an else if is evaluating. Just like an if statement, this condition goes in parentheses and if 
	true, will execute what is in the code block.

	. else follows else if: If you choose to include an else statement (it’s optional), make sure it comes after any else if statements you might have.

Program.cs
----------
using System;

namespace ElseIfStatement
{
  class Program
  {
    static void Main(string[] args)
    {
      int guests = 0;
      if (guests >= 4) 
      {
        Console.WriteLine("Catan");
      }
      else if (guests >= 1) 
      {
        Console.WriteLine("Innovation");
      }
      else 
      {
        Console.WriteLine("Solitaire");
      }
    }
  }
}

==================================================================================================================================================================

* Switch Statements
-------------------
Using multiple else if statements can get unwieldy pretty quickly. Imagine writing an else if statement for every possible number of guests. And you invited 20 people. You have to write a 
lot of repetitive code, which is hard to read and prone to errors.

If it’s necessary to evaluate several conditions with their own unique output, a switch statement is the way to go. Switch statements allow for compact control flow structures by 
evaluating a single expression and executing code blocks based on a matched case.

In C#, we write a switch statement using the following syntax:

string color;
 
switch (color)
{
   case "blue":
      // execute if the value of color is "blue"
      Console.WriteLine("color is blue");
      break;
   case "red":
      // execute if the value of color is "red"
      Console.WriteLine("color is red");
      break;
   case "green":
      // execute if the value of color is "green"
      Console.WriteLine("color is green");
      break;
   default:
      // execute if none of the above conditions are met
      break;
}
 
In this example, the program checks to see what the value of color equals. If it matches any of the specified cases, it will execute the code associated with that case. In C#, the break 
keyword allows programs to exit a block when a specific condition is met. If none of the conditions are met, the code inside the default case will run.

When using a switch statement, make sure to pay attention to:

	. Cases: rather than writing out each condition, if we’re evaluating one value we use cases to specify different potential values.

	. Braces: rather than each case having its own code block, the entire statement lives within one set of braces {}.

	. Colons: to distinguish between different cases, we state the case value, followed by a colon :. The code that should execute if that case is met follows.

	. Break: Each case code needs to end with a break keyword.
	
	. Default: Every switch statement needs a default case.

Program.cs
----------
using System;

namespace SwitchStatement
{
  class Program
  {
    static void Main(string[] args)
    {
      Console.WriteLine("Pick a gender: ");
      string genre = Console.ReadLine();
      switch (genre)
      {
        case "Drama":
          Console.WriteLine("Citizen Kane");
        break;
        case "Comedy":
          Console.WriteLine("Duck Soup");
        break;
        case "Adventure":
          Console.WriteLine("King Kong");
        break;
        case "Horror":
          Console.WriteLine("Psycho");
        break;
        case "Science Fiction":
          Console.WriteLine("A Space Odyssey");
        break; 
        default:
          Console.WriteLine("No movie found");
          break;
      }
    }
  }
}

==================================================================================================================================================================
















































































